generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String
  email                 String        @unique
  password              String
  role                  String        @default("user")
  phone                 String?
  whatsapp              String?
  blocked               Boolean       @default(false)
  isVerified            Boolean       @default(false)
  verificationStatus    String?       // PENDING, APPROVED, REJECTED
  verificationDocument  String?
  extraListings         Int           @default(0)
  isSubscriber          Boolean       @default(false)
  subscriptionExpiresAt DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  payments              Payment[]
  subscriptions         Subscription[]
  approvedPayments      Payment[]     @relation("PaymentApprover")
  approvedSubscriptions Subscription[] @relation("SubscriptionApprover")
  bookings              Booking[]
  vehicles              Vehicle[]
  savedVehicles         SavedVehicle[]
  notifications         Notification[]
  sentMessages          Message[]     @relation("SentMessages")
  receivedMessages      Message[]     @relation("ReceivedMessages")

  @@index([email])
  @@index([isVerified])
}

model Payment {
  id        Int       @id @default(autoincrement())
  userId    Int
  amount    Float
  paymentMethod String // Telebirr, CBE, etc.
  referenceNumber String
  screenshot String? // URL to payment screenshot
  status    PaymentStatus @default(PENDING)
  paymentType PaymentType @default(LISTING) // LISTING or SUBSCRIPTION
  createdAt DateTime  @default(now())
  approvedAt DateTime?
  approvedBy Int? // Admin user ID who approved
  user      User      @relation(fields: [userId], references: [id])
  approvedByUser User? @relation("PaymentApprover", fields: [approvedBy], references: [id])
}

model Subscription {
  id        Int       @id @default(autoincrement())
  userId    Int
  planType  SubscriptionPlan @default(MONTHLY)
  amount    Float
  paymentMethod String
  referenceNumber String
  screenshot String? // URL to payment screenshot
  status    PaymentStatus @default(PENDING)
  startDate DateTime? // When subscription starts (after approval)
  endDate   DateTime? // When subscription expires
  createdAt DateTime  @default(now())
  approvedAt DateTime?
  approvedBy Int? // Admin user ID who approved
  user      User      @relation(fields: [userId], references: [id])
  approvedByUser User? @relation("SubscriptionApprover", fields: [approvedBy], references: [id])
}

model Vehicle {
  id          Int         @id @default(autoincrement())
  type        VehicleType
  brand       String
  model       String
  year        Int
  pricePerDay Float
  available   Boolean     @default(true)
  status      VehicleStatus @default(PENDING)
  featured    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  images      String[]    @default([])
  ownerId     Int
  owner       User        @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
  savedBy     SavedVehicle[]
  messages    Message[]
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  vehicleId  Int
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
}

model SavedVehicle {
  id        Int      @id @default(autoincrement())
  userId    Int
  vehicleId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([userId, vehicleId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model Message {
  id         Int       @id @default(autoincrement())
  senderId   Int
  receiverId Int
  vehicleId  Int
  text       String
  timestamp  DateTime  @default(now())
  readAt     DateTime? // When the receiver read the message
  
  sender     User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([vehicleId])
  @@index([timestamp])
}

enum VehicleType {
  CAR
  MOTORBIKE
}

enum VehicleStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentType {
  LISTING
  SUBSCRIPTION
}

enum SubscriptionPlan {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum UserRole {
  USER
  ADMIN
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
